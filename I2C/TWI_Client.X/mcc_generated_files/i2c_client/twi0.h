/**
 * A header file generated by TWI0 I2C client driver.
 *
 * @file twi0.h
 *
 * @defgroup i2c_interrupt TWI0_CLIENT_INTERRUPT
 *
 * @brief This header file includes API prototypes and various data types for the TWI0 client driver.
 *
 * @version TWI0 Driver Version 2.1.4
 * 
 * @version TWI0 Package Version 8.2.0
 */

/*
© [2025] Microchip Technology Inc. and its subsidiaries.

    Subject to your compliance with these terms, you may use Microchip 
    software and any derivatives exclusively with Microchip products. 
    You are responsible for complying with 3rd party license terms  
    applicable to your use of 3rd party software (including open source  
    software) that may accompany Microchip software. SOFTWARE IS ?AS IS.? 
    NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS 
    SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT,  
    MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT 
    WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY 
    KIND WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF 
    MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE 
    FORESEEABLE. TO THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP?S 
    TOTAL LIABILITY ON ALL CLAIMS RELATED TO THE SOFTWARE WILL NOT 
    EXCEED AMOUNT OF FEES, IF ANY, YOU PAID DIRECTLY TO MICROCHIP FOR 
    THIS SOFTWARE.
*/

#ifndef TWI0_H
#define TWI0_H

/**
 * @misradeviation {@advisory,2.5} False positive - A few macros in this file 
 * are used as arguments but are not getting recognized by the tool.
 * This rule ID has been disabled at the project level due to numerous 
 * instances across various files.
 * Consequently, in the application project, this rule ID must be disabled
 * in the MPLAB-X IDE by navigating to Tools>Options>Embedded>MISRA Check.
 */

#include <stdbool.h>
#include <stdint.h>
#include "i2c_client_types.h"
#include "i2c_client_interface.h"

#define i2c0_md_client_interface I2C0_MD

#define I2C0_MD_Initialize TWI0_Initialize
#define I2C0_MD_Deinitialize TWI0_Deinitialize
#define I2C0_MD_WriteByte TWI0_WriteByte
#define I2C0_MD_ReadByte TWI0_ReadByte
#define I2C0_MD_ReadAddr TWI0_ReadAddr
#define I2C0_MD_ErrorGet TWI0_ErrorGet
#define I2C0_MD_TransferDirGet TWI0_TransferDirGet
#define I2C0_MD_LastByteAckStatusGet TWI0_LastByteAckStatusGet
#define I2C0_MD_CallbackRegister TWI0_CallbackRegister
/**
 * @ingroup I2C_CLIENT
 * @brief Represents an instance of the portable interface structure designed for TWI0 client.
 */
extern const i2c_client_interface_t I2C0_MD;

/**
 * @ingroup i2c_client_interrupt
 * @brief Initializes the TWI0 client module according to the settings specified in the MPLABÂ® Code Configurator Melody UI.
 * @param None.
 * @return None. \n
 */ 
void TWI0_Initialize(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Resets the registers to their default Power-on Reset (POR) values.
 * @param None.
 * @return None. \n
 */
void TWI0_Deinitialize(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Sends data to a host on the bus.
 *        Ensure TWI0 is initialized using TWI0_Initialize() before invoking this function.
 * @param [in] data - A byte that will be written by TWI0
 * @return None. \n
 */
void TWI0_WriteByte(uint8_t data);

/**
 * @ingroup i2c_client_interrupt
 * @brief Reads data from a host on the bus.
 *        Ensure TWI0 is initialized using TWI0_Initialize() before invoking this function.
 * @param None.
 * @return uint8_t - A byte read by TWI0 client
 */
uint8_t TWI0_ReadByte(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Retrieves the most recently matched address received from the host.
 *        Ensure TWI0 client is initialized using 
 *        TWI0_Initialize() before invoking this function.
 * @param None.
 * @return address byte - Last Matched address for TWI0 client
 */
uint16_t TWI0_ReadAddr(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Retrieves the type of error that occurred during I2C communication. 
 *        Ensure TWI0 is initialized using TWI0_Initialize() before invoking this function.
 * @param None.
 * @return I2C_CLIENT_ERROR_BUS_COLLISION - I2C Bus Collision Error \n
 * @return I2C_CLIENT_ERROR_WRITE_COLLISION - I2C Write Collision Error \n
 * @return I2C_CLIENT_ERROR_RECEIVE_OVERFLOW - I2C Receive overflow \n
 * @return I2C_CLIENT_ERROR_NONE - No Error
 */
i2c_client_error_t TWI0_ErrorGet(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Retrieves the data transfer direction.
 *        Ensure TWI0 is initialized using TWI0_Initialize() before invoking this function.
 * @param None. 
 * @return I2C_CLIENT_TRANSFER_DIR_WRITE - I2C client writes to host \n
 * @return I2C_CLIENT_TRANSFER_DIR_READ - I2C client reads from host \n
 */
i2c_client_transfer_dir_t TWI0_TransferDirGet(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Retrieves the acknowledgement status from host.
 *        Ensure TWI0 is initialized using TWI0_Initialize() before invoking this function.
 * @param None. 
 * @return I2C_CLIENT_ACK_STATUS_RECEIVED_ACK - An ACK was received for the most recent transaction with the host \n
 * @return I2C_CLIENT_ACK_STATUS_RECEIVED_NACK - A NACK was received for the most recent transaction with the host \n
 */
i2c_client_ack_status_t TWI0_LastByteAckStatusGet(void);

/**
 * @ingroup i2c_client_interrupt
 * @brief Registers a callback function.
 * @param callback - Pointer to custom callback.
 * @return None.
 */
void TWI0_CallbackRegister(bool (*callback)(i2c_client_transfer_event_t clientEvent));


#endif /* TWI0_H */
